import { Device } from "../device.js";
import { IO_Port } from "../../instructions.js";

export class BlockRAM implements Device {
    blockGrid:number[][][] = [
        [
            [ 3, 3, 3, 3, 3, 3, 3, 1, ],
            [ 3, 3, 3, 3, 3, 3, 1, 1, ],
            [ 3, 3, 3, 3, 3, 3, 1, 1, ],
    		[ 3, 3, 3, 3, 3, 3, 1, 1, ],
    		[ 3, 3, 3, 3, 3, 1, 1, 1, ],
    		[ 3, 3, 3, 3, 3, 1, 1, 1, ],
    		[ 3, 3, 3, 3, 1, 1, 1, 1, ],
    		[ 3, 3, 3, 1, 1, 1, 1, 1, ],
        ],
        [
    		[ 3, 3, 3, 3, 1, 1, 1, 0, ],
    		[ 3, 3, 3, 1, 1, 1, 0, 0, ],
    		[ 3, 3, 1, 1, 1, 1, 0, 0, ],
    		[ 3, 3, 1, 1, 1, 1, 0, 0, ],
    		[ 3, 1, 1, 1, 1, 0, 0, 0, ],
    		[ 1, 1, 1, 1, 1, 0, 0, 0, ],
    		[ 1, 1, 1, 1, 0, 0, 0, 0, ],
    		[ 1, 1, 1, 0, 0, 0, 0, 0, ],
        ],
        [
    		[ 1, 1, 1, 1, 0, 0, 0, 0, ],
    		[ 1, 1, 1, 0, 0, 0, 0, 0, ],
    		[ 1, 1, 0, 0, 5, 0, 0, 0, ],
    		[ 1, 1, 0, 0, 0, 0, 0, 0, ],
    		[ 1, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
        ],
        [
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 5, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
        ],
        [
    		[ 0, 0, 0, 6, 6, 6, 0, 0, ],
    		[ 0, 0, 6, 6, 6, 6, 6, 0, ],
    		[ 0, 0, 6, 6, 5, 6, 6, 0, ],
    		[ 0, 0, 6, 6, 6, 6, 6, 0, ],
    		[ 0, 0, 0, 6, 6, 6, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
        ],
        [
    		[ 0, 0, 0, 6, 6, 6, 0, 0, ],
    		[ 0, 0, 6, 6, 6, 6, 6, 0, ],
    		[ 0, 0, 6, 6, 5, 6, 6, 0, ],
    		[ 0, 0, 6, 6, 6, 6, 6, 0, ],
    		[ 0, 0, 0, 6, 6, 6, 6, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
        ],
        [
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 6, 6, 0, 0, 0, ],
    		[ 0, 0, 0, 6, 6, 6, 0, 0, ],
    		[ 0, 0, 0, 6, 6, 6, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
        ],
        [
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 6, 0, 0, 0, ],
    		[ 0, 0, 0, 6, 6, 6, 0, 0, ],
    		[ 0, 0, 0, 0, 6, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
    		[ 0, 0, 0, 0, 0, 0, 0, 0, ],
        ]
    ];
    x = 0;
    y = 0;
    z = 0;
    id = 0;
    constructor() {

    }
    inputs = {
        [IO_Port.BLOCKRAM_ID]: () => {
            return this.blockGrid[this.x][this.y][this.z] ?? 0;
        },
        [IO_Port.BLOCKRAM_ZI]: () => {
            return (this.z << 4) | (this.blockGrid[this.x][this.y][this.z] ?? 0);
        },
        [IO_Port.BLOCKRAM_SETID]: () => {
            this.blockGrid[this.x][this.y][this.z] = this.id;
            return 0;
        }
    }
    outputs = {
        [IO_Port.BLOCKRAM_XY]: (i:number) => {
            this.x = i >> 4;
            this.y = i & 0x0F;
        },
        [IO_Port.BLOCKRAM_ZI]: (i:number) => {
            this.z = i >> 4;
            this.id = i & 0x0F;
        }
    }
}